<?php

declare(strict_types=1);
/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license.
 */

/**
 * Copy-paste this file to your config/autoload folder (don't forget to remove the .dist extension!)
 */

return [
    'lmc_rbac' => [

        /**
         * Set the guest role
         *
         * This role is used by the authorization service when the authentication service returns no identity
         */
        // 'guest_role' => 'guest',

        /**
         * Configuration for role provider
         *
         * It must be an array that contains configuration for the role provider.
         * The default Role Provider is 'LmcRbac\Role\InMemoryRoleProvider'
         *
         * Supported options depend of the role provider, so please refer to the official documentation
         *
         * The provider config for InMemoryRoleProvider must follow the following format:
         *
         *       Lmc\Rbac\Role\InMemoryRoleProvider::class => [
         *           'role1' => [
         *               'children'    => ['children1', 'children2'], // OPTIONAL
         *               'permissions' => ['edit', 'read'] // OPTIONAL
         *           ]
         *       ]
         */
        // 'role_provider' => [],

        /**
         * Defining the assertion map
         *
         * The assertion map can automatically map permissions to assertions. This means that every times you check for
         * a permission mentioned in the assertion map, you will include the assertion in your check.
         *
         * example:
         *   'assertion_map' => [
         *     'article.edit' => 'AssertOwnerCanEditArticle'
         *   ],
         *
         * If an assertion needs to be created via a factory use the `assertion_manager` config key.
         *
         * example:
         *   'assertion_manager' => [
         *     'AssertOwnerCanEditArticle' => \My\Namespace\AssertOwnerCanEditArticleFactory::class
         *   ],
         */
        'assertion_map' => [
        ],
    ],
];
