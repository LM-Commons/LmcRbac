"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6892],{4047:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=i(4848),t=i(8453);const r={title:"Quick Start",sidebar_position:1},o=void 0,c={id:"quick-start",title:"Quick Start",description:"LmcRbac offers components and services to implement role-based access control (RBAC) in your application.",source:"@site/versioned_docs/version-2.0/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/LmcRbac/docs/quick-start",draft:!1,unlisted:!1,editUrl:"https://github.com/lm-commons/lmcrbac/tree/master/docs/versioned_docs/version-2.0/quick-start.md",tags:[],version:"2.0",sidebarPosition:1,frontMatter:{title:"Quick Start",sidebar_position:1},sidebar:"documentationSidebar",next:{title:"Roles, permissions and Role providers",permalink:"/LmcRbac/docs/role-providers"}},a={},d=[{value:"Concepts",id:"concepts",level:2},{value:"Authorization",id:"authorization",level:3},{value:"Dynamic Assertions",id:"dynamic-assertions",level:3},{value:"Identities",id:"identities",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Defining roles",id:"defining-roles",level:2},{value:"Basic authorization",id:"basic-authorization",level:2},{value:"Using assertions",id:"using-assertions",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["LmcRbac offers components and services to implement role-based access control (RBAC) in your application.\nLmcRbac extends the components provided by ",(0,s.jsx)(n.a,{href:"https://github.com/laminas/laminas-permissions-rbac",children:"laminas-permissions-rbac"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"LmcRbac can be used in Laminas MVC and in Mezzio applications."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you are upgrading from LmcRbac v1 or from zfc-rbac v3, please read the ",(0,s.jsx)(n.a,{href:"/LmcRbac/docs/Upgrading/to-v2",children:"Upgrading section"})]})}),"\n",(0,s.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Role-based_access_control",children:"Role-Based Access Control (RBAC)"}),"\nis an approach to restricting system access to authorized users by putting emphasis\non roles and their permissions."]}),"\n",(0,s.jsx)(n.p,{children:"In the RBAC model:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["an ",(0,s.jsx)(n.strong,{children:"identity"})," has one of more roles."]}),"\n",(0,s.jsxs)(n.li,{children:["a ",(0,s.jsx)(n.strong,{children:"role"})," has one of more permissions."]}),"\n",(0,s.jsxs)(n.li,{children:["a ",(0,s.jsx)(n.strong,{children:"permission"}),' is typically an action like "read", "write", "delete".']}),"\n",(0,s.jsxs)(n.li,{children:["a ",(0,s.jsx)(n.strong,{children:"role"})," can have ",(0,s.jsx)(n.strong,{children:"child roles"})," thus providing a hierarchy of roles where a role will inherit the permissions of all its child roles."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"authorization",children:"Authorization"}),"\n",(0,s.jsx)(n.p,{children:"An identity will be authorized to perform an action, such as accessing a resource, if it is granted\nthe permission that controls the execution of the action."}),"\n",(0,s.jsxs)(n.p,{children:["For example, deleting an item could be restricted to identities that have at least one role that has the\n",(0,s.jsx)(n.code,{children:"item.delete"})," permission.  This could be implemented by defining a ",(0,s.jsx)(n.code,{children:"member"})," role that has the ",(0,s.jsx)(n.code,{children:"item.delete"})," and assigning\nthis role of an authenticated user."]}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-assertions",children:"Dynamic Assertions"}),"\n",(0,s.jsxs)(n.p,{children:["In some cases, just checking if the identity has the ",(0,s.jsx)(n.code,{children:"item.delete"})," permission is not enough.\nIt would also be necessary to check, for example, that the ",(0,s.jsx)(n.code,{children:"item"})," belongs to the identity. Dynamic assertion allow\nto specify some extra checks before granting access to perform an action such as, in this case, being the owner of the\nresource."]}),"\n",(0,s.jsx)(n.h3,{id:"identities",children:"Identities"}),"\n",(0,s.jsx)(n.p,{children:"An identity is typically provided by an authentication process within the application."}),"\n",(0,s.jsxs)(n.p,{children:["Authentication is not in the scope of ",(0,s.jsx)(n.code,{children:"LmcRbac"}),' and it is assumed that an identity entity that can provide the assigned\nroles is available when using the authorization service. If no identity is available, as it would be the case when no\nuser is "logged in", then a guest role is assumed.']}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PHP 8.1 or higher"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"LmcRbac only officially supports installation through Composer."}),"\n",(0,s.jsx)(n.p,{children:"Install the module:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ composer require lm-commons/lmc-rbac "~1.0"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You will be prompted by the ",(0,s.jsx)(n.code,{children:"laminas-component-installer"})," plugin to inject LM-Commons\\LmcRbac."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Manual installation:"})}),(0,s.jsxs)(n.p,{children:["Enable the module by adding ",(0,s.jsx)(n.code,{children:"Lmc\\Rbac"})," key to your ",(0,s.jsx)(n.code,{children:"application.config.php"})," or ",(0,s.jsx)(n.code,{children:"modules.config.php"})," file for Laminas MVC\napplications, or to the ",(0,s.jsx)(n.code,{children:"config/config.php"})," file for Mezzio applications."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Customize the module by copy-pasting\nthe ",(0,s.jsx)(n.code,{children:"lmcrbac.global.php"})," file to your ",(0,s.jsx)(n.code,{children:"config/autoload"})," folder."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["On older versions of ",(0,s.jsx)(n.code,{children:"LmcRbac"}),", the configuration file is named ",(0,s.jsx)(n.code,{children:"config/config.global.php"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"defining-roles",children:"Defining roles"}),"\n",(0,s.jsx)(n.p,{children:"By default, no roles and no permissions are defined."}),"\n",(0,s.jsxs)(n.p,{children:["Roles and permissions are defined by a Role Provider. ",(0,s.jsx)(n.code,{children:"LmcRbac"})," ships with two roles providers:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["a simple ",(0,s.jsx)(n.code,{children:"InMemoryRoleProvider"})," that uses an associative array to define roles and their permission. This is the default."]}),"\n",(0,s.jsxs)(n.li,{children:["a ",(0,s.jsx)(n.code,{children:"ObjectRepositoyRoleProvider"})," that is based on Doctrine ORM."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To quickly get started, let's use the ",(0,s.jsx)(n.code,{children:"InMemoryRoleProvider"})," role provider."]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"config/autoload/lmcrbac.global.php"}),", add the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\nreturn [\n    'lmc_rbac' => [\n        'role_provider' => [\n            Lmc\\Rbac\\Role\\InMemoryRoleProvider::class => [\n                'guest',\n                'user' => [\n                    'permissions' => ['create', 'edit'],\n                ],\n                'admin' => [\n                    'children' => ['user'],\n                    'permissions' => ['delete'],\n                ],\n            ],\n        ],\n    ],\n];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This defines 3 roles: a ",(0,s.jsx)(n.code,{children:"guest"})," role, a ",(0,s.jsx)(n.code,{children:"user"})," role having 2 permissions, and a ",(0,s.jsx)(n.code,{children:"admin"})," role which has the ",(0,s.jsx)(n.code,{children:"user"})," role as\na child and with its own permission. If the hierarchy is flattened:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"guest"})," has no permission"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user"})," has permissions ",(0,s.jsx)(n.code,{children:"create"})," and ",(0,s.jsx)(n.code,{children:"edit"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"admin"})," has permissions ",(0,s.jsx)(n.code,{children:"create"}),", ",(0,s.jsx)(n.code,{children:"edit"})," and ",(0,s.jsx)(n.code,{children:"delete"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"basic-authorization",children:"Basic authorization"}),"\n",(0,s.jsx)(n.p,{children:"The authorization service can get retrieved from the service manager container and used to check if a permission\nis granted to an identity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $authorizationService = $container->get('\\Lmc\\Rbac\\Service\\AuthorizationServiceInterface');\n    \n    /** @var \\Lmc\\Rbac\\Identity\\IdentityInterface $identity */\n    if ($authorizationService->isGranted($identity, 'create')) {\n        /** do something */\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"$identity"})," has the role ",(0,s.jsx)(n.code,{children:"user"})," and/or ",(0,s.jsx)(n.code,{children:"admin"})," then the authorization is granted. If the identity has the role ",(0,s.jsx)(n.code,{children:"guest"}),", then authorization\nis denied."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"$identity"})," is null (no identity), then the guest role is assumed which is set to ",(0,s.jsx)(n.code,{children:"'guest'"})," by default. The guest role\ncan be configured in the ",(0,s.jsx)(n.code,{children:"lmcrbac.config.php"})," file.  More on this in the ",(0,s.jsx)(n.a,{href:"/LmcRbac/docs/configuration",children:"Configuration"})," section."]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"LmcRbac"})," does not provide any logic to instantiate an identity entity. It is assumed that\nthe application will instantiate an entity that implements ",(0,s.jsx)(n.code,{children:"\\Lmc\\Rbac\\Identity\\IdentityInterface"})," which defines the ",(0,s.jsx)(n.code,{children:"getRoles()"}),"\nmethod."]})}),"\n",(0,s.jsx)(n.h2,{id:"using-assertions",children:"Using assertions"}),"\n",(0,s.jsxs)(n.p,{children:["Even if an identity has the ",(0,s.jsx)(n.code,{children:"user"})," role granting it the ",(0,s.jsx)(n.code,{children:"edit"})," permission, it should not have the authorization to edit another identity's resource."]}),"\n",(0,s.jsx)(n.p,{children:"This can be achieved using dynamic assertion."}),"\n",(0,s.jsxs)(n.p,{children:["An assertion is a function that implements the ",(0,s.jsx)(n.code,{children:"\\Lmc\\Rbac\\Assertion\\AssertionInterface"})," and is configured in the configuration\nfile."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's modify the ",(0,s.jsx)(n.code,{children:"lmcrbac.config.php"})," file as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\nreturn [\n    'lmc_rbac' => [\n        'role_provider' => [\n            /* roles and permissions\n        ],\n        'assertion_map' => [\n            'edit' => function ($permission, IdentityInterface $identity = null, $resource = null) {\n                        if ($resource->getOwnerId() === $identity->getId() {\n                            return true;\n                        } else {\n                            return false;\n                      }\n        ],\n    ],\n];\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then use the authorization service passing the resource (called a 'context') in addition to the permission:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $authorizationService = $container->get('\\Lmc\\Rbac\\Service\\AuthorizationServiceInterface');\n    \n    /** @var \\Lmc\\Rbac\\Identity\\IdentityInterface $identity */\n    if ($authorizationService->isGranted($identity, 'edit', $resource)) {\n        /** do something */\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dynanmic assertions are further discussed in the ",(0,s.jsx)(n.a,{href:"assertions",children:"Dynamic Assertions"})," section."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);