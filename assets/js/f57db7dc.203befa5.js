"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9519],{6210:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var s=n(4848),r=n(8453);const t={sidebar_label:"Authorization service",sidebar_position:5,title:"Authorization Service"},o=void 0,c={id:"authorization-service",title:"Authorization Service",description:"Usage",source:"@site/versioned_docs/version-2.0/authorization-service.md",sourceDirName:".",slug:"/authorization-service",permalink:"/LmcRbac/docs/authorization-service",draft:!1,unlisted:!1,editUrl:"https://github.com/lm-commons/lmcrbac/tree/master/docs/versioned_docs/version-2.0/authorization-service.md",tags:[],version:"2.0",sidebarPosition:5,frontMatter:{sidebar_label:"Authorization service",sidebar_position:5,title:"Authorization Service"},sidebar:"documentationSidebar",previous:{title:"Roles, permissions and Role providers",permalink:"/LmcRbac/docs/role-providers"},next:{title:"Dynamic Assertions",permalink:"/LmcRbac/docs/assertions"}},a={},d=[{value:"Usage",id:"usage",level:3},{value:"Reference",id:"reference",level:3},{value:"<code>isGranted(?IdentityInterface $identity, string $permission, $context = null): bool</code>",id:"isgrantedidentityinterface-identity-string-permission-context--null-bool",level:4},{value:"<code>setAssertions(array $assertions, bool $merge = false): void</code>",id:"setassertionsarray-assertions-bool-merge--false-void",level:4},{value:"<code>setAssertion(string $permission, AssertionInterface|callable|string $assertion): void</code>",id:"setassertionstring-permission-assertioninterfacecallablestring-assertion-void",level:4},{value:"<code>hasAssertion(string $permission): bool</code>",id:"hasassertionstring-permission-bool",level:4},{value:"<code>getAssertions(): array</code>",id:"getassertions-array",level:4},{value:"<code>getAssertion(string $permission): AssertionInterface|callable|string|null</code>",id:"getassertionstring-permission-assertioninterfacecallablestringnull",level:4},{value:"Injecting the Authorization Service",id:"injecting-the-authorization-service",level:2},{value:"Using a factory",id:"using-a-factory",level:3},{value:"Using traits",id:"using-traits",level:3},{value:"Using delegators",id:"using-delegators",level:3}];function l(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(i.p,{children:["The Authorization service can be retrieved from the service manager using the name\n",(0,s.jsx)(i.code,{children:"Lmc\\Rbac\\Service\\AuthorizationServiceInterface"})," and injected into your code:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-php",children:"<?php\n    /** @var \\Psr\\Container\\ContainerInterface $container */\n    $authorizationService = $container->get(Lmc\\Rbac\\Service\\AuthorizationServiceInterface::class);\n\n"})}),"\n",(0,s.jsx)(i.h3,{id:"reference",children:"Reference"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"Lmc\\Rbac\\Service\\AuthorizationServiceInterface"})," defines the following methods:"]}),"\n",(0,s.jsx)(i.h4,{id:"isgrantedidentityinterface-identity-string-permission-context--null-bool",children:(0,s.jsx)(i.code,{children:"isGranted(?IdentityInterface $identity, string $permission, $context = null): bool"})}),"\n",(0,s.jsx)(i.p,{children:"Checks that the identity has is granted the permission for the (optional) context."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Parameter"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$identity"})}),(0,s.jsxs)(i.td,{children:["The identity whose roles to checks. ",(0,s.jsx)("br",{}),"If ",(0,s.jsx)(i.code,{children:"$identity"})," is null, then the ",(0,s.jsx)(i.code,{children:"guest"})," is used. ",(0,s.jsx)("br",{}),"The ",(0,s.jsx)(i.code,{children:"guest"})," role is definable via configuration and defaults to ",(0,s.jsx)(i.code,{children:"'guest'"}),"."]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$permission"})}),(0,s.jsx)(i.td,{children:"The permission to check against"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$context"})}),(0,s.jsx)(i.td,{children:"A context that will be passed to dynamic assertions that are defined for the permission"})]})]})]}),"\n",(0,s.jsx)(i.h4,{id:"setassertionsarray-assertions-bool-merge--false-void",children:(0,s.jsx)(i.code,{children:"setAssertions(array $assertions, bool $merge = false): void"})}),"\n",(0,s.jsx)(i.p,{children:"Allows to define dynamic assertions at run-time."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Parameter"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$assertions"})}),(0,s.jsx)(i.td,{children:"An array of assertions to merge or to replace"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$merge"})}),(0,s.jsxs)(i.td,{children:["if ",(0,s.jsx)(i.code,{children:"true"})," the content of ",(0,s.jsx)(i.code,{children:"$assertions"})," will be merged with existing assertions."]})]})]})]}),"\n",(0,s.jsx)(i.h4,{id:"setassertionstring-permission-assertioninterfacecallablestring-assertion-void",children:(0,s.jsx)(i.code,{children:"setAssertion(string $permission, AssertionInterface|callable|string $assertion): void"})}),"\n",(0,s.jsx)(i.p,{children:"Allows to define a dynamic assertion at run-time."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Parameter"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$permission"})}),(0,s.jsx)(i.td,{children:"Permission name"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$assertion"})}),(0,s.jsxs)(i.td,{children:["The assertion to set for ",(0,s.jsx)(i.code,{children:"$permission"})]})]})]})]}),"\n",(0,s.jsx)(i.h4,{id:"hasassertionstring-permission-bool",children:(0,s.jsx)(i.code,{children:"hasAssertion(string $permission): bool"})}),"\n",(0,s.jsx)(i.p,{children:"Checks if the authorization has a dynamic assertion for a given permission."}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Parameter"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsx)(i.tbody,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$permission"})}),(0,s.jsx)(i.td,{children:"Permission name"})]})})]}),"\n",(0,s.jsx)(i.h4,{id:"getassertions-array",children:(0,s.jsx)(i.code,{children:"getAssertions(): array"})}),"\n",(0,s.jsx)(i.p,{children:"Returns all the dynamic assertions defined."}),"\n",(0,s.jsx)(i.h4,{id:"getassertionstring-permission-assertioninterfacecallablestringnull",children:(0,s.jsx)(i.code,{children:"getAssertion(string $permission): AssertionInterface|callable|string|null"})}),"\n",(0,s.jsx)(i.p,{children:"Returns the dynamic assertion for the give permission"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Parameter"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsx)(i.tbody,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"$permission"})}),(0,s.jsx)(i.td,{children:"Permission permission name"})]})})]}),"\n",(0,s.jsxs)(i.p,{children:["More on dynamic assertions can be found in the ",(0,s.jsx)(i.a,{href:"/LmcRbac/docs/assertions",children:"Assertions"})," section."]}),"\n",(0,s.jsxs)(i.p,{children:["More on the ",(0,s.jsx)(i.code,{children:"guest"})," role can be found in the ",(0,s.jsx)(i.a,{href:"/LmcRbac/docs/configuration",children:"Configuration"})," section."]}),"\n",(0,s.jsx)(i.h2,{id:"injecting-the-authorization-service",children:"Injecting the Authorization Service"}),"\n",(0,s.jsx)(i.p,{children:"There are a few methods to inject the Authorization Service into your service."}),"\n",(0,s.jsx)(i.h3,{id:"using-a-factory",children:"Using a factory"}),"\n",(0,s.jsxs)(i.p,{children:["You can inject the AuthorizationService into your own objects using a factory. The Authorization Service\ncan be retrieved from the container using ",(0,s.jsx)(i.code,{children:"'Lmc\\Rbac\\Service\\AuthorizationServiceInterface'"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"Here is a classic example for injecting the Authorization Service into your own service"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.em,{children:"in your app's Module"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-php",children:"use Lmc\\Rbac\\Service\\AuthorizationServiceInterface;\nclass Module\n{\n    public function getConfig()\n    {\n        return [\n            'service_manager' => [\n                'factories' => [\n                     'MyService' => function($sm) {\n                         $authService = $sm->get('AuthorizationServiceInterface');\n                        return new MyService($authService);\n                        }\n                ],\n            ],\n        ];\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h3,{id:"using-traits",children:"Using traits"}),"\n",(0,s.jsxs)(i.p,{children:["For convenience, LmcRbac provides a ",(0,s.jsx)(i.code,{children:"AuthorizationServiceAwareTrait"})," that adds the ",(0,s.jsx)(i.code,{children:"$authorizationService"})," property and\nsetter/getter methods."]}),"\n",(0,s.jsx)(i.h3,{id:"using-delegators",children:"Using delegators"}),"\n",(0,s.jsxs)(i.p,{children:["LmcRbac ships with a ",(0,s.jsx)(i.code,{children:"Lmc\\Rbac\\Service\\AuthorizationServiceDelegatorFactory"})," ",(0,s.jsx)(i.a,{href:"https://docs.laminas.dev/laminas-servicemanager/delegators/",children:"delegator factory"}),"\nto automatically inject the authorization service into your classes."]}),"\n",(0,s.jsxs)(i.p,{children:["Your class must implement the ",(0,s.jsx)(i.code,{children:"Lmc\\Rbac\\Service\\AuthorizationServiceAwareInterface"})," and use the above trait, as shown below:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-php",children:"namespace MyModule;\n\nuse Lmc\\Rbac\\Service\\AuthorizationServiceAwareInterface;\nuse Lmc\\Rbac\\Service\\AuthorizationServiceAwareTrait;\n\nclass MyClass implements AuthorizationServiceAwareInterface\n{\n    use AuthorizationServiceAwareTrait;\n\n    public function doSomethingThatRequiresAuth()\n    {\n        if (! $this->getAuthorizationService()->isGranted($identity, 'deletePost')) {\n            throw new \\Exception('You are not allowed !');\n        }\n        return true;\n    }\n}\n"})}),"\n",(0,s.jsx)(i.p,{children:"And add your class to the right delegator:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-php",children:"namespace MyModule;\nuse Lmc\\Rbac\\Service\\AuthorizationServiceDelegatorFactory;\nclass Module\n{\n    // ...\n\n    public function getConfig()\n    {\n        return [\n            'service_manager' => [\n                'factories' => [\n                    MyClass::class => InvokableFactory::class,\n                ],\n                'delegators' => [\n                    MyClass::class => [\n                         AuthorizationServiceDelegatorFactory::class,               \n                    ],\n                ],\n            ],\n        ];\n    }\n}\n"})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var s=n(6540);const r={},t=s.createContext(r);function o(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);