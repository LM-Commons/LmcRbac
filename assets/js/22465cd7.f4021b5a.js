"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[166],{6066:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>t,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>a});var n=o(4848),i=o(8453);const l={sidebar_label:"Roles and Role providers",title:"Roles and Role providers",sidebar_position:4},s=void 0,c={id:"role-providers",title:"Roles and Role providers",description:"Role types",source:"@site/docs/role-providers.md",sourceDirName:".",slug:"/role-providers",permalink:"/LmcRbac/docs/role-providers",draft:!1,unlisted:!1,editUrl:"https://github.com/lm-commons/lmcrbac/tree/master/docs/docs/role-providers.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Roles and Role providers",title:"Roles and Role providers",sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"Quick start",permalink:"/LmcRbac/docs/quickstart"},next:{title:"Authorization service",permalink:"/LmcRbac/docs/authorization-service"}},t={},a=[{value:"Role types",id:"role-types",level:2},{value:"Flat roles",id:"flat-roles",level:3},{value:"Hierarchical roles",id:"hierarchical-roles",level:3},{value:"Role Providers",id:"role-providers",level:2},{value:"Built-in role providers",id:"built-in-role-providers",level:3},{value:"<code>LmcRbac\\Role\\InMemoryRoleProvider</code>",id:"lmcrbacroleinmemoryroleprovider",level:3},{value:"<code>LmcRbac\\Role\\ObjectRepositoryRoleProvider</code>",id:"lmcrbacroleobjectrepositoryroleprovider",level:3},{value:"Creating custom role providers",id:"creating-custom-role-providers",level:2}];function d(e){const r={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"role-types",children:"Role types"}),"\n",(0,n.jsx)(r.p,{children:"A role is an object that returns a list of permissions that the role has."}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"LmcRbac"})," support two types of roles: hierarchical roles and flat roles."]}),"\n",(0,n.jsx)(r.h3,{id:"flat-roles",children:"Flat roles"}),"\n",(0,n.jsx)(r.p,{children:"A flat role is the simplest role object. It contains the list of permissions that\nthe role has."}),"\n",(0,n.jsxs)(r.p,{children:["Flat roles are defined using by the ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\Role"})," class or by classes\nimplementing the ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\RoleInterface"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"hierarchical-roles",children:"Hierarchical roles"}),"\n",(0,n.jsx)(r.p,{children:"A hierarchical role is a role that has child roles and therefore provides\na hierarchy of roles where a role inherit the permissions of all its child roles."}),"\n",(0,n.jsx)(r.p,{children:"For example, a 'user' role may have the 'read' and 'write' permissions, and a 'admin' role\nmay inherit the permissions of the 'user' role plus an additional 'delete' role. In this structure,\nthe 'admin' role will have 'user' as its child role."}),"\n",(0,n.jsx)(r.p,{children:"Hierarchical roles may have flat roles or hierarchical roles as children."}),"\n",(0,n.jsxs)(r.p,{children:["Hierarchical roles are defined using by the ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\HierarchicalRole"})," class or by classes\nimplementing the ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\HierarchicalRoleInterface"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"role-providers",children:"Role Providers"}),"\n",(0,n.jsxs)(r.p,{children:["A role provider is an object that returns a list of roles. A role provider must implement the\n",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\RoleProviderInterface"})," interface. The only required method is ",(0,n.jsx)(r.code,{children:"getRoles"}),", and must return an array\nof ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\RoleInterface"})," objects."]}),"\n",(0,n.jsx)(r.p,{children:"Roles can come from one of many sources: in memory, from a file, from a database, etc. However, you can specify only one role provider per application."}),"\n",(0,n.jsx)(r.h3,{id:"built-in-role-providers",children:"Built-in role providers"}),"\n",(0,n.jsxs)(r.p,{children:["LmcRbac comes with two built-in role providers: ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\InMemoryRoleProvider"})," and ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\ObjectRepositoryRoleProvider"}),". A role\nprovider must be added to the ",(0,n.jsx)(r.code,{children:"role_provider"})," subkey in the configuration file:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'role_provider' => [\n            // Role provider config here!\n        ]\n    ]\n];\n"})}),"\n",(0,n.jsx)(r.h3,{id:"lmcrbacroleinmemoryroleprovider",children:(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\InMemoryRoleProvider"})}),"\n",(0,n.jsx)(r.p,{children:"This provider is ideal for small/medium sites with few roles/permissions. All the data is specified in a simple associative array in a\nPHP file."}),"\n",(0,n.jsx)(r.p,{children:"Here is an example of the format you need to use:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'role_provider' => [\n            'LmcRbac\\Role\\InMemoryRoleProvider' => [\n                'admin' => [\n                    'children'    => ['member'],\n                    'permissions' => ['article.delete']\n                ],\n                'member' => [\n                    'children'    => ['guest'],\n                    'permissions' => ['article.edit', 'article.archive']\n                ],\n                'guest' => [\n                    'permissions' => ['article.read']\n                ],\n            ],\n        ],\n    ],\n];\n"})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"children"})," and ",(0,n.jsx)(r.code,{children:"permissions"})," subkeys are entirely optional. Internally, the ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\InMemoryRoleProvider"})," creates\neither a ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\Role"})," object if the role does not have any children, or a ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\HierarchicalRole"})," if\nthe role has at least one child."]}),"\n",(0,n.jsx)(r.p,{children:"If you are more confident with flat RBAC, the previous config can be re-written to remove any inheritence between roles:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'role_provider' => [\n            'LmcRbac\\Role\\InMemoryRoleProvider' => [\n                'admin' => [\n                    'permissions' => [\n                        'article.delete',\n                        'article.edit',\n                        'article.archive',\n                        'article.read'\n                    ]\n                ],\n                'member' => [\n                    'permissions' => [\n                        'article.edit',\n                        'article.archive',\n                        'article.read'\n                    ]\n                ],\n                'guest' => [\n                    'permissions' => ['article.read']\n                ]\n            ]\n        ]\n    ]\n];\n"})}),"\n",(0,n.jsx)(r.h3,{id:"lmcrbacroleobjectrepositoryroleprovider",children:(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\ObjectRepositoryRoleProvider"})}),"\n",(0,n.jsxs)(r.p,{children:["This provider fetches roles from a database using ",(0,n.jsx)(r.code,{children:"Doctrine\\Common\\Persistence\\ObjectRepository"})," interface."]}),"\n",(0,n.jsxs)(r.p,{children:["You can configure this provider by giving an object repository service name that is fetched from the service manager\nusing the ",(0,n.jsx)(r.code,{children:"object_repository"})," key:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'role_provider' => [\n            'LmcRbac\\Role\\ObjectRepositoryRoleProvider' => [\n                'object_repository'  => 'App\\Repository\\RoleRepository',\n                'role_name_property' => 'name'\n            ],\n        ],\n    ],\n];\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Or you can specify the ",(0,n.jsx)(r.code,{children:"object_manager"})," and ",(0,n.jsx)(r.code,{children:"class_name"})," options:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'role_provider' => [\n            'LmcRbac\\Role\\ObjectRepositoryRoleProvider' => [\n                'object_manager'     => 'doctrine.entitymanager.orm_default',\n                'class_name'         => 'App\\Entity\\Role',\n                'role_name_property' => 'name'\n            ],\n        ],\n    ],\n];\n"})}),"\n",(0,n.jsxs)(r.p,{children:["In both cases, you need to specify the ",(0,n.jsx)(r.code,{children:"role_name_property"})," value, which is the name of the entity's property\nthat holds the actual role name. This is used internally to only load the identity roles, instead of loading\nthe whole table every time."]}),"\n",(0,n.jsxs)(r.p,{children:["Please note that your entity fetched from the table MUST implement the ",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\RoleInterface"})," interface."]}),"\n",(0,n.jsxs)(r.p,{children:["Sample ORM entity models are provided in the ",(0,n.jsx)(r.code,{children:"/data"})," folder for flat role, hierarchical role and permission."]}),"\n",(0,n.jsx)(r.h2,{id:"creating-custom-role-providers",children:"Creating custom role providers"}),"\n",(0,n.jsxs)(r.p,{children:["To create a custom role provider, you first need to create a class that implements the\n",(0,n.jsx)(r.code,{children:"LmcRbac\\Role\\RoleProviderInterface"})," interface."]}),"\n",(0,n.jsx)(r.p,{children:"Then, you need to add it to the role provider manager:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'lmc_rbac' => [\n        'role_provider' => [\n            'Application\\Role\\CustomRoleProvider' => [\n                // Options\n            ],\n        ],\n    ],\n];\n"})}),"\n",(0,n.jsx)(r.p,{children:"And the role provider is created using the service manager:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"return [\n    'service_manager' => [\n        'factories' => [\n            'Application\\Role\\CustomRoleProvider' => 'Application\\Factory\\CustomRoleProviderFactory'\n        ],\n    ],\n];\n"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>c});var n=o(6540);const i={},l=n.createContext(i);function s(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);